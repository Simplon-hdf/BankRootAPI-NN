generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model bank_account {
  id               Int             @id(map: "bank_account_pk") @default(autoincrement())
  currency         Int             @default(0)
  num_account      String          @db.VarChar(255)
  withdrawal_limit Int
  payment_ceiling  Int
  overdraft_limit  Int
  created_at       DateTime        @default(now())
  update_at        DateTime        @updatedAt
  peut_gerer       peut_gerer[]
  peut_posseder    peut_posseder[]
  transaction      transaction[]
}

model peut_gerer {
  id           Int
  id_user      Int
  bank_account bank_account @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "peut_gerer_bank_account_fk")
  user         user         @relation(fields: [id_user], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "peut_gerer_user0_fk")

  @@id([id, id_user], map: "peut_gerer_pk")
}

model peut_posseder {
  id              Int
  id_bank_account Int
  bank_account    bank_account @relation(fields: [id_bank_account], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "peut_posseder_bank_account0_fk")
  user            user         @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "peut_posseder_user_fk")

  @@id([id, id_bank_account], map: "peut_posseder_pk")
}

model peut_valider {
  id             Int
  id_transaction Int
  transaction    transaction @relation(fields: [id_transaction], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "peut_valider_transaction0_fk")
  user           user        @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "peut_valider_user_fk")

  @@id([id, id_transaction], map: "peut_valider_pk")
}

model request {
  id           Int       @id(map: "request_pk") @default(autoincrement())
  content      String    @db.VarChar(255)
  request_type String    @db.VarChar(50)
  status       Boolean
  created_at   DateTime  @default(now())
  update_at    DateTime  @updatedAt
  id_user      Int
  user         user      @relation(fields: [id_user], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "request_user_fk")
  traiter      traiter[]
}

model traiter {
  id         Int
  id_request Int
  request    request @relation(fields: [id_request], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "traiter_request0_fk")
  user       user    @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "traiter_user_fk")

  @@id([id, id_request], map: "traiter_pk")
}

model transaction {
  id              Int            @id(map: "transaction_pk") @default(autoincrement())
  amount          Int
  state           Boolean
  type            String         @db.VarChar(50)
  created_at      DateTime       @default(now())
  update_at       DateTime       @updatedAt
  id_user         Int
  id_bank_account Int
  peut_valider    peut_valider[]
  bank_account    bank_account   @relation(fields: [id_bank_account], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "transaction_bank_account0_fk")
  user            user           @relation(fields: [id_user], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "transaction_user_fk")
}

model user {
  id            Int             @id(map: "user_pk") @default(autoincrement())
  name          String          @db.VarChar(50)
  lastname      String          @db.VarChar(50)
  mail          String          @db.VarChar(50)
  password      String          @db.VarChar(250)
  uuid          String          @db.VarChar(250)
  rank          Int             @default(0)
  created_at    DateTime        @default(now())
  updated_at    DateTime        @updatedAt
  peut_gerer    peut_gerer[]
  peut_posseder peut_posseder[]
  peut_valider  peut_valider[]
  request       request[]
  traiter       traiter[]
  transaction   transaction[]
}
